
LED_shift_8bit_500ms.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000140  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000093f  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000813  00000000  00000000  00000b63  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000322  00000000  00000000  00001376  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001698  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003fa  00000000  00000000  000016bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000178  00000000  00000000  00001ab6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001c2e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	50 c0       	rjmp	.+160    	; 0x13c <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:

int main(void)
{
	int direction=RIGHT;
	int start=1;
	DDRD = 0xff;
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	81 bb       	out	0x11, r24	; 17
	PORTD=0x00;
  a2:	12 ba       	out	0x12, r1	; 18


int main(void)
{
	int direction=RIGHT;
	int start=1;
  a4:	41 e0       	ldi	r20, 0x01	; 1
  a6:	50 e0       	ldi	r21, 0x00	; 0
#define RIGHT 1


int main(void)
{
	int direction=RIGHT;
  a8:	21 e0       	ldi	r18, 0x01	; 1
  aa:	30 e0       	ldi	r19, 0x00	; 0
	DDRD = 0xff;
	PORTD=0x00;
	/* replace with your application code */
	while (1)
	{
		if(start == 1)
  ac:	41 30       	cpi	r20, 0x01	; 1
  ae:	51 05       	cpc	r21, r1
  b0:	71 f4       	brne	.+28     	; 0xce <main+0x30>
		{
			PORTD =0x01;
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	4f ef       	ldi	r20, 0xFF	; 255
  b8:	69 e6       	ldi	r22, 0x69	; 105
  ba:	78 e1       	ldi	r23, 0x18	; 24
  bc:	41 50       	subi	r20, 0x01	; 1
  be:	60 40       	sbci	r22, 0x00	; 0
  c0:	70 40       	sbci	r23, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <main+0x1e>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x28>
  c6:	00 00       	nop
			_delay_ms(500);
			start = 2;
  c8:	42 e0       	ldi	r20, 0x02	; 2
  ca:	50 e0       	ldi	r21, 0x00	; 0
  cc:	ef cf       	rjmp	.-34     	; 0xac <main+0xe>
		}
		else if(start != 1)
  ce:	41 30       	cpi	r20, 0x01	; 1
  d0:	51 05       	cpc	r21, r1
  d2:	61 f3       	breq	.-40     	; 0xac <main+0xe>
		{

			if(direction == RIGHT)
  d4:	21 30       	cpi	r18, 0x01	; 1
  d6:	31 05       	cpc	r19, r1
  d8:	b9 f4       	brne	.+46     	; 0x108 <main+0x6a>
  da:	12 c0       	rjmp	.+36     	; 0x100 <main+0x62>
			{
				for( uint8_t i=0; i<7 ;i++)
				{
					PORTD=(PORTD & 0xff) <<1;
  dc:	82 b3       	in	r24, 0x12	; 18
  de:	88 0f       	add	r24, r24
  e0:	82 bb       	out	0x12, r24	; 18
					if(PORTD & ( 1<<PIND7))
  e2:	97 9b       	sbis	0x12, 7	; 18
  e4:	02 c0       	rjmp	.+4      	; 0xea <main+0x4c>
					{
						direction=LEFT;
  e6:	20 e0       	ldi	r18, 0x00	; 0
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	69 e6       	ldi	r22, 0x69	; 105
  ee:	78 e1       	ldi	r23, 0x18	; 24
  f0:	81 50       	subi	r24, 0x01	; 1
  f2:	60 40       	sbci	r22, 0x00	; 0
  f4:	70 40       	sbci	r23, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <main+0x52>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x5c>
  fa:	00 00       	nop
		else if(start != 1)
		{

			if(direction == RIGHT)
			{
				for( uint8_t i=0; i<7 ;i++)
  fc:	9f 5f       	subi	r25, 0xFF	; 255
  fe:	01 c0       	rjmp	.+2      	; 0x102 <main+0x64>
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	97 30       	cpi	r25, 0x07	; 7
 104:	58 f3       	brcs	.-42     	; 0xdc <main+0x3e>
 106:	d2 cf       	rjmp	.-92     	; 0xac <main+0xe>
						direction=LEFT;
					}
					_delay_ms(500);
				}
			}
			else if(direction == LEFT)
 108:	21 15       	cp	r18, r1
 10a:	31 05       	cpc	r19, r1
 10c:	99 f0       	breq	.+38     	; 0x134 <main+0x96>
 10e:	ce cf       	rjmp	.-100    	; 0xac <main+0xe>
			{
				for( uint8_t i=0; i<7 ;i++)
				{

					PORTD=(PORTD &0xff)>>1;
 110:	82 b3       	in	r24, 0x12	; 18
 112:	86 95       	lsr	r24
 114:	82 bb       	out	0x12, r24	; 18
					if(PORTD & (1<<PIND0))
 116:	90 9b       	sbis	0x12, 0	; 18
 118:	02 c0       	rjmp	.+4      	; 0x11e <main+0x80>
					{
						direction=RIGHT;
 11a:	21 e0       	ldi	r18, 0x01	; 1
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	8f ef       	ldi	r24, 0xFF	; 255
 120:	69 e6       	ldi	r22, 0x69	; 105
 122:	78 e1       	ldi	r23, 0x18	; 24
 124:	81 50       	subi	r24, 0x01	; 1
 126:	60 40       	sbci	r22, 0x00	; 0
 128:	70 40       	sbci	r23, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <main+0x86>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <main+0x90>
 12e:	00 00       	nop
					_delay_ms(500);
				}
			}
			else if(direction == LEFT)
			{
				for( uint8_t i=0; i<7 ;i++)
 130:	9f 5f       	subi	r25, 0xFF	; 255
 132:	01 c0       	rjmp	.+2      	; 0x136 <main+0x98>
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	97 30       	cpi	r25, 0x07	; 7
 138:	58 f3       	brcs	.-42     	; 0x110 <main+0x72>
 13a:	b8 cf       	rjmp	.-144    	; 0xac <main+0xe>

0000013c <_exit>:
 13c:	f8 94       	cli

0000013e <__stop_program>:
 13e:	ff cf       	rjmp	.-2      	; 0x13e <__stop_program>
