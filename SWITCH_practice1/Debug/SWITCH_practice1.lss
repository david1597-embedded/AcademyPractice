
SWITCH_practice1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000152  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000974  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000080a  00000000  00000000  00000bac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000333  00000000  00000000  000013b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000016ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000427  00000000  00000000  00001710  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001dd  00000000  00000000  00001b37  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001d14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	59 c0       	rjmp	.+178    	; 0x14e <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
#include <util/delay.h>


int main(void)
{
	DDRD =0xff;
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	81 bb       	out	0x11, r24	; 17
	DDRG =0x00;
  a2:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	uint8_t buttonData;
	
    int flag=0; //integer in Atmega128a is 2byte
    /* Replace with your application code */
	
	PORTD=0x00;
  a6:	12 ba       	out	0x12, r1	; 18
	DDRG =0x00;
	
	uint8_t ledData =0x01;
	uint8_t buttonData;
	
    int flag=0; //integer in Atmega128a is 2byte
  a8:	20 e0       	ldi	r18, 0x00	; 0
  aa:	30 e0       	ldi	r19, 0x00	; 0
int main(void)
{
	DDRD =0xff;
	DDRG =0x00;
	
	uint8_t ledData =0x01;
  ac:	91 e0       	ldi	r25, 0x01	; 1
	
	PORTD=0x00;
	
    while (1) 
    {
		buttonData=PING;
  ae:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7e0063>
		if((buttonData & (1<<4)) == 0)
  b2:	84 fd       	sbrc	r24, 4
  b4:	12 c0       	rjmp	.+36     	; 0xda <main+0x3c>
		{
			PORTD=ledData;
  b6:	92 bb       	out	0x12, r25	; 18
			ledData=(ledData >> 7) | (ledData << 1);
  b8:	49 2f       	mov	r20, r25
  ba:	50 e0       	ldi	r21, 0x00	; 0
  bc:	44 0f       	add	r20, r20
  be:	55 1f       	adc	r21, r21
  c0:	99 1f       	adc	r25, r25
  c2:	99 27       	eor	r25, r25
  c4:	99 1f       	adc	r25, r25
  c6:	94 2b       	or	r25, r20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	4f ef       	ldi	r20, 0xFF	; 255
  ca:	55 ea       	ldi	r21, 0xA5	; 165
  cc:	6e e0       	ldi	r22, 0x0E	; 14
  ce:	41 50       	subi	r20, 0x01	; 1
  d0:	50 40       	sbci	r21, 0x00	; 0
  d2:	60 40       	sbci	r22, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0x30>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x3a>
  d8:	00 00       	nop
			_delay_ms(300);
		}
		if((buttonData & (1<<3)) == 0)
  da:	83 fd       	sbrc	r24, 3
  dc:	10 c0       	rjmp	.+32     	; 0xfe <main+0x60>
		{
			PORTD=ledData;
  de:	92 bb       	out	0x12, r25	; 18
			ledData = (ledData << 7) | (ledData >> 1);
  e0:	60 e8       	ldi	r22, 0x80	; 128
  e2:	96 9f       	mul	r25, r22
  e4:	a0 01       	movw	r20, r0
  e6:	11 24       	eor	r1, r1
  e8:	96 95       	lsr	r25
  ea:	94 2b       	or	r25, r20
  ec:	4f ef       	ldi	r20, 0xFF	; 255
  ee:	55 ea       	ldi	r21, 0xA5	; 165
  f0:	6e e0       	ldi	r22, 0x0E	; 14
  f2:	41 50       	subi	r20, 0x01	; 1
  f4:	50 40       	sbci	r21, 0x00	; 0
  f6:	60 40       	sbci	r22, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0x54>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x5e>
  fc:	00 00       	nop
			_delay_ms(300);
		}
		
		if(flag == 0)
  fe:	21 15       	cp	r18, r1
 100:	31 05       	cpc	r19, r1
 102:	21 f4       	brne	.+8      	; 0x10c <main+0x6e>
		{
			if((buttonData & (1<<2))==0)
 104:	82 fd       	sbrc	r24, 2
 106:	02 c0       	rjmp	.+4      	; 0x10c <main+0x6e>
			{
				flag =1 ;
 108:	21 e0       	ldi	r18, 0x01	; 1
 10a:	30 e0       	ldi	r19, 0x00	; 0
			else
			{
				flag = 0 ;
			}
		}
		if(flag == 1)
 10c:	21 30       	cpi	r18, 0x01	; 1
 10e:	31 05       	cpc	r19, r1
 110:	71 f6       	brne	.-100    	; 0xae <main+0x10>
 112:	17 c0       	rjmp	.+46     	; 0x142 <main+0xa4>
		{
			for(uint8_t i=0; i <3;i++)
			{
				PORTD=0xff;
 114:	2f ef       	ldi	r18, 0xFF	; 255
 116:	22 bb       	out	0x12, r18	; 18
 118:	2f ef       	ldi	r18, 0xFF	; 255
 11a:	39 e6       	ldi	r19, 0x69	; 105
 11c:	48 e1       	ldi	r20, 0x18	; 24
 11e:	21 50       	subi	r18, 0x01	; 1
 120:	30 40       	sbci	r19, 0x00	; 0
 122:	40 40       	sbci	r20, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <main+0x80>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0x8a>
 128:	00 00       	nop
				_delay_ms(500);
				PORTD=0x00;
 12a:	12 ba       	out	0x12, r1	; 18
 12c:	5f ef       	ldi	r21, 0xFF	; 255
 12e:	69 e6       	ldi	r22, 0x69	; 105
 130:	28 e1       	ldi	r18, 0x18	; 24
 132:	51 50       	subi	r21, 0x01	; 1
 134:	60 40       	sbci	r22, 0x00	; 0
 136:	20 40       	sbci	r18, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <main+0x94>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <main+0x9e>
 13c:	00 00       	nop
				flag = 0 ;
			}
		}
		if(flag == 1)
		{
			for(uint8_t i=0; i <3;i++)
 13e:	8f 5f       	subi	r24, 0xFF	; 255
 140:	01 c0       	rjmp	.+2      	; 0x144 <main+0xa6>
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	83 30       	cpi	r24, 0x03	; 3
 146:	30 f3       	brcs	.-52     	; 0x114 <main+0x76>
				PORTD=0xff;
				_delay_ms(500);
				PORTD=0x00;
				_delay_ms(500);			
			}
			flag=0;
 148:	20 e0       	ldi	r18, 0x00	; 0
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	b0 cf       	rjmp	.-160    	; 0xae <main+0x10>

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>
