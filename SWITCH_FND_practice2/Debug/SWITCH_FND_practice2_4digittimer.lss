
SWITCH_FND_practice2_4digittimer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000002f2  00000386  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080010a  0080010a  00000390  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000093a  00000000  00000000  00000428  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000846  00000000  00000000  00000d62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000034d  00000000  00000000  000015a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  000018f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045e  00000000  00000000  0000193c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001b3  00000000  00000000  00001d9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001f4d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ef       	ldi	r30, 0xF2	; 242
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 30       	cpi	r26, 0x0B	; 11
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	d8 d0       	rcall	.+432    	; 0x274 <main>
  c4:	14 c1       	rjmp	.+552    	; 0x2ee <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <fndDisPlay>:
#define FND_SELECT_DDR DDRC
#define FND_DATA_PORT PORTB
#define FND_SELECT_PORT PORTC

void fndDisPlay(uint16_t data)
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	2a 97       	sbiw	r28, 0x0a	; 10
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	f8 94       	cli
  d6:	de bf       	out	0x3e, r29	; 62
  d8:	0f be       	out	0x3f, r0	; 63
  da:	cd bf       	out	0x3d, r28	; 61
  dc:	ac 01       	movw	r20, r24
	static uint8_t position=0;
	uint8_t fndData[]={	
  de:	8a e0       	ldi	r24, 0x0A	; 10
  e0:	e0 e0       	ldi	r30, 0x00	; 0
  e2:	f1 e0       	ldi	r31, 0x01	; 1
  e4:	de 01       	movw	r26, r28
  e6:	11 96       	adiw	r26, 0x01	; 1
  e8:	01 90       	ld	r0, Z+
  ea:	0d 92       	st	X+, r0
  ec:	8a 95       	dec	r24
  ee:	e1 f7       	brne	.-8      	; 0xe8 <fndDisPlay+0x20>
		0x7D,
		0x27,
		0x7F,
		0x67
		};
	switch(position)
  f0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	39 f1       	breq	.+78     	; 0x146 <fndDisPlay+0x7e>
  f8:	38 f0       	brcs	.+14     	; 0x108 <fndDisPlay+0x40>
  fa:	82 30       	cpi	r24, 0x02	; 2
  fc:	09 f4       	brne	.+2      	; 0x100 <fndDisPlay+0x38>
  fe:	55 c0       	rjmp	.+170    	; 0x1aa <fndDisPlay+0xe2>
 100:	83 30       	cpi	r24, 0x03	; 3
 102:	09 f4       	brne	.+2      	; 0x106 <fndDisPlay+0x3e>
 104:	82 c0       	rjmp	.+260    	; 0x20a <fndDisPlay+0x142>
 106:	a7 c0       	rjmp	.+334    	; 0x256 <fndDisPlay+0x18e>
	{
		//set only digit 1 LED on
		case 0:
		FND_SELECT_PORT &= ~(1<<0);
 108:	85 b3       	in	r24, 0x15	; 21
 10a:	8e 7f       	andi	r24, 0xFE	; 254
 10c:	85 bb       	out	0x15, r24	; 21
		FND_SELECT_PORT |= (1<<1)|(1<<2)|(1<<3);
 10e:	85 b3       	in	r24, 0x15	; 21
 110:	8e 60       	ori	r24, 0x0E	; 14
 112:	85 bb       	out	0x15, r24	; 21
		FND_DATA_PORT = fndData[data/1000];
 114:	9a 01       	movw	r18, r20
 116:	36 95       	lsr	r19
 118:	27 95       	ror	r18
 11a:	36 95       	lsr	r19
 11c:	27 95       	ror	r18
 11e:	36 95       	lsr	r19
 120:	27 95       	ror	r18
 122:	a5 ec       	ldi	r26, 0xC5	; 197
 124:	b0 e2       	ldi	r27, 0x20	; 32
 126:	d4 d0       	rcall	.+424    	; 0x2d0 <__umulhisi3>
 128:	92 95       	swap	r25
 12a:	82 95       	swap	r24
 12c:	8f 70       	andi	r24, 0x0F	; 15
 12e:	89 27       	eor	r24, r25
 130:	9f 70       	andi	r25, 0x0F	; 15
 132:	89 27       	eor	r24, r25
 134:	e1 e0       	ldi	r30, 0x01	; 1
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	ec 0f       	add	r30, r28
 13a:	fd 1f       	adc	r31, r29
 13c:	e8 0f       	add	r30, r24
 13e:	f9 1f       	adc	r31, r25
 140:	80 81       	ld	r24, Z
 142:	88 bb       	out	0x18, r24	; 24
		break;
 144:	88 c0       	rjmp	.+272    	; 0x256 <fndDisPlay+0x18e>
		
		case 1:
		FND_SELECT_PORT &= ~(1<<1);
 146:	85 b3       	in	r24, 0x15	; 21
 148:	8d 7f       	andi	r24, 0xFD	; 253
 14a:	85 bb       	out	0x15, r24	; 21
		FND_SELECT_PORT |= (1<<0)|(1<<2)|(1<<3);
 14c:	85 b3       	in	r24, 0x15	; 21
 14e:	8d 60       	ori	r24, 0x0D	; 13
 150:	85 bb       	out	0x15, r24	; 21
		FND_DATA_PORT = fndData[data/100%10];
 152:	9a 01       	movw	r18, r20
 154:	36 95       	lsr	r19
 156:	27 95       	ror	r18
 158:	36 95       	lsr	r19
 15a:	27 95       	ror	r18
 15c:	ab e7       	ldi	r26, 0x7B	; 123
 15e:	b4 e1       	ldi	r27, 0x14	; 20
 160:	b7 d0       	rcall	.+366    	; 0x2d0 <__umulhisi3>
 162:	ac 01       	movw	r20, r24
 164:	56 95       	lsr	r21
 166:	47 95       	ror	r20
 168:	9a 01       	movw	r18, r20
 16a:	ad ec       	ldi	r26, 0xCD	; 205
 16c:	bc ec       	ldi	r27, 0xCC	; 204
 16e:	b0 d0       	rcall	.+352    	; 0x2d0 <__umulhisi3>
 170:	96 95       	lsr	r25
 172:	87 95       	ror	r24
 174:	96 95       	lsr	r25
 176:	87 95       	ror	r24
 178:	96 95       	lsr	r25
 17a:	87 95       	ror	r24
 17c:	9c 01       	movw	r18, r24
 17e:	22 0f       	add	r18, r18
 180:	33 1f       	adc	r19, r19
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	82 0f       	add	r24, r18
 190:	93 1f       	adc	r25, r19
 192:	9a 01       	movw	r18, r20
 194:	28 1b       	sub	r18, r24
 196:	39 0b       	sbc	r19, r25
 198:	e1 e0       	ldi	r30, 0x01	; 1
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	ec 0f       	add	r30, r28
 19e:	fd 1f       	adc	r31, r29
 1a0:	e2 0f       	add	r30, r18
 1a2:	f3 1f       	adc	r31, r19
 1a4:	80 81       	ld	r24, Z
 1a6:	88 bb       	out	0x18, r24	; 24
		break;
 1a8:	56 c0       	rjmp	.+172    	; 0x256 <fndDisPlay+0x18e>
		
		case 2:
		FND_SELECT_PORT &= ~(1<<2);
 1aa:	85 b3       	in	r24, 0x15	; 21
 1ac:	8b 7f       	andi	r24, 0xFB	; 251
 1ae:	85 bb       	out	0x15, r24	; 21
		FND_SELECT_PORT |= (1<<0)|(1<<1)|(1<<3);
 1b0:	85 b3       	in	r24, 0x15	; 21
 1b2:	8b 60       	ori	r24, 0x0B	; 11
 1b4:	85 bb       	out	0x15, r24	; 21
		FND_DATA_PORT = fndData[data/10%10];
 1b6:	9a 01       	movw	r18, r20
 1b8:	ad ec       	ldi	r26, 0xCD	; 205
 1ba:	bc ec       	ldi	r27, 0xCC	; 204
 1bc:	89 d0       	rcall	.+274    	; 0x2d0 <__umulhisi3>
 1be:	ac 01       	movw	r20, r24
 1c0:	56 95       	lsr	r21
 1c2:	47 95       	ror	r20
 1c4:	56 95       	lsr	r21
 1c6:	47 95       	ror	r20
 1c8:	56 95       	lsr	r21
 1ca:	47 95       	ror	r20
 1cc:	9a 01       	movw	r18, r20
 1ce:	80 d0       	rcall	.+256    	; 0x2d0 <__umulhisi3>
 1d0:	96 95       	lsr	r25
 1d2:	87 95       	ror	r24
 1d4:	96 95       	lsr	r25
 1d6:	87 95       	ror	r24
 1d8:	96 95       	lsr	r25
 1da:	87 95       	ror	r24
 1dc:	9c 01       	movw	r18, r24
 1de:	22 0f       	add	r18, r18
 1e0:	33 1f       	adc	r19, r19
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	82 0f       	add	r24, r18
 1f0:	93 1f       	adc	r25, r19
 1f2:	9a 01       	movw	r18, r20
 1f4:	28 1b       	sub	r18, r24
 1f6:	39 0b       	sbc	r19, r25
 1f8:	e1 e0       	ldi	r30, 0x01	; 1
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	ec 0f       	add	r30, r28
 1fe:	fd 1f       	adc	r31, r29
 200:	e2 0f       	add	r30, r18
 202:	f3 1f       	adc	r31, r19
 204:	80 81       	ld	r24, Z
 206:	88 bb       	out	0x18, r24	; 24
		break;
 208:	26 c0       	rjmp	.+76     	; 0x256 <fndDisPlay+0x18e>
		
		case 3:
		FND_SELECT_PORT &= ~(1<<3);
 20a:	85 b3       	in	r24, 0x15	; 21
 20c:	87 7f       	andi	r24, 0xF7	; 247
 20e:	85 bb       	out	0x15, r24	; 21
		FND_SELECT_PORT |= (1<<0)|(1<<1)|(1<<2);
 210:	85 b3       	in	r24, 0x15	; 21
 212:	87 60       	ori	r24, 0x07	; 7
		FND_DATA_PORT = fndData[data%10];
 214:	85 bb       	out	0x15, r24	; 21
 216:	9a 01       	movw	r18, r20
 218:	ad ec       	ldi	r26, 0xCD	; 205
 21a:	bc ec       	ldi	r27, 0xCC	; 204
 21c:	59 d0       	rcall	.+178    	; 0x2d0 <__umulhisi3>
 21e:	96 95       	lsr	r25
 220:	87 95       	ror	r24
 222:	96 95       	lsr	r25
 224:	87 95       	ror	r24
 226:	96 95       	lsr	r25
 228:	87 95       	ror	r24
 22a:	9c 01       	movw	r18, r24
 22c:	22 0f       	add	r18, r18
 22e:	33 1f       	adc	r19, r19
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	82 0f       	add	r24, r18
 23e:	93 1f       	adc	r25, r19
 240:	9a 01       	movw	r18, r20
 242:	28 1b       	sub	r18, r24
 244:	39 0b       	sbc	r19, r25
 246:	e1 e0       	ldi	r30, 0x01	; 1
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	ec 0f       	add	r30, r28
 24c:	fd 1f       	adc	r31, r29
 24e:	e2 0f       	add	r30, r18
 250:	f3 1f       	adc	r31, r19
 252:	80 81       	ld	r24, Z
 254:	88 bb       	out	0x18, r24	; 24
		break;	
	}
	position ++;
 256:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 25a:	8f 5f       	subi	r24, 0xFF	; 255
	position = position %4;
 25c:	83 70       	andi	r24, 0x03	; 3
 25e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
}
 262:	2a 96       	adiw	r28, 0x0a	; 10
 264:	0f b6       	in	r0, 0x3f	; 63
 266:	f8 94       	cli
 268:	de bf       	out	0x3e, r29	; 62
 26a:	0f be       	out	0x3f, r0	; 63
 26c:	cd bf       	out	0x3d, r28	; 61
 26e:	df 91       	pop	r29
 270:	cf 91       	pop	r28
 272:	08 95       	ret

00000274 <main>:
int main(void)
{
	
    FND_DATA_DDR=0xff;
 274:	8f ef       	ldi	r24, 0xFF	; 255
 276:	87 bb       	out	0x17, r24	; 23
	FND_SELECT_DDR=0xff;
 278:	84 bb       	out	0x14, r24	; 20
	FND_SELECT_PORT=0x00;
 27a:	15 ba       	out	0x15, r1	; 21
	
	uint16_t count=0;
	uint32_t timeTick=0;
	uint32_t prevTime=0;
 27c:	81 2c       	mov	r8, r1
 27e:	91 2c       	mov	r9, r1
 280:	54 01       	movw	r10, r8
    FND_DATA_DDR=0xff;
	FND_SELECT_DDR=0xff;
	FND_SELECT_PORT=0x00;
	
	uint16_t count=0;
	uint32_t timeTick=0;
 282:	c1 2c       	mov	r12, r1
 284:	d1 2c       	mov	r13, r1
 286:	76 01       	movw	r14, r12
	
    FND_DATA_DDR=0xff;
	FND_SELECT_DDR=0xff;
	FND_SELECT_PORT=0x00;
	
	uint16_t count=0;
 288:	c0 e0       	ldi	r28, 0x00	; 0
 28a:	d0 e0       	ldi	r29, 0x00	; 0
 28c:	02 c0       	rjmp	.+4      	; 0x292 <main+0x1e>
		}
		_delay_ms(1); // 1ms delay
		timeTick++; // 시간을 1ms씩 증가
		if(count == 99)
		{
			count = 0;
 28e:	c0 e0       	ldi	r28, 0x00	; 0
 290:	d0 e0       	ldi	r29, 0x00	; 0
	uint32_t timeTick=0;
	uint32_t prevTime=0;
    /* Replace with your application code */
    while (1) 
    {
        fndDisPlay(count);
 292:	ce 01       	movw	r24, r28
 294:	19 df       	rcall	.-462    	; 0xc8 <fndDisPlay>
		if(timeTick-prevTime > 100)//Increase count 
 296:	d7 01       	movw	r26, r14
 298:	c6 01       	movw	r24, r12
 29a:	88 19       	sub	r24, r8
 29c:	99 09       	sbc	r25, r9
 29e:	aa 09       	sbc	r26, r10
 2a0:	bb 09       	sbc	r27, r11
 2a2:	85 36       	cpi	r24, 0x65	; 101
 2a4:	91 05       	cpc	r25, r1
 2a6:	a1 05       	cpc	r26, r1
 2a8:	b1 05       	cpc	r27, r1
 2aa:	18 f0       	brcs	.+6      	; 0x2b2 <main+0x3e>
		{
			prevTime=timeTick;
			count ++;
 2ac:	21 96       	adiw	r28, 0x01	; 1
    while (1) 
    {
        fndDisPlay(count);
		if(timeTick-prevTime > 100)//Increase count 
		{
			prevTime=timeTick;
 2ae:	46 01       	movw	r8, r12
 2b0:	57 01       	movw	r10, r14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b2:	8f e9       	ldi	r24, 0x9F	; 159
 2b4:	9f e0       	ldi	r25, 0x0F	; 15
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <main+0x42>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <main+0x48>
 2bc:	00 00       	nop
			count ++;
		}
		_delay_ms(1); // 1ms delay
		timeTick++; // 시간을 1ms씩 증가
 2be:	9f ef       	ldi	r25, 0xFF	; 255
 2c0:	c9 1a       	sub	r12, r25
 2c2:	d9 0a       	sbc	r13, r25
 2c4:	e9 0a       	sbc	r14, r25
 2c6:	f9 0a       	sbc	r15, r25
		if(count == 99)
 2c8:	c3 36       	cpi	r28, 0x63	; 99
 2ca:	d1 05       	cpc	r29, r1
 2cc:	11 f7       	brne	.-60     	; 0x292 <main+0x1e>
 2ce:	df cf       	rjmp	.-66     	; 0x28e <main+0x1a>

000002d0 <__umulhisi3>:
 2d0:	a2 9f       	mul	r26, r18
 2d2:	b0 01       	movw	r22, r0
 2d4:	b3 9f       	mul	r27, r19
 2d6:	c0 01       	movw	r24, r0
 2d8:	a3 9f       	mul	r26, r19
 2da:	70 0d       	add	r23, r0
 2dc:	81 1d       	adc	r24, r1
 2de:	11 24       	eor	r1, r1
 2e0:	91 1d       	adc	r25, r1
 2e2:	b2 9f       	mul	r27, r18
 2e4:	70 0d       	add	r23, r0
 2e6:	81 1d       	adc	r24, r1
 2e8:	11 24       	eor	r1, r1
 2ea:	91 1d       	adc	r25, r1
 2ec:	08 95       	ret

000002ee <_exit>:
 2ee:	f8 94       	cli

000002f0 <__stop_program>:
 2f0:	ff cf       	rjmp	.-2      	; 0x2f0 <__stop_program>
